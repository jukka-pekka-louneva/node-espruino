{
  "name": "node-espruino",
  "version": "0.1.5",
  "description": "Node library for interfacing with espruino javascript microcontroller.",
  "main": "node-espruino.js",
  "homepage": "https://bitbucket.org/VoiceOfWisdom/node-espruino",
  "scripts": {
    "test": "mocha ./test"
  },
  "author": {
    "name": "Xavier Zwirtz"
  },
  "license": "MIT",
  "dependencies": {
    "commander": "^2.5.0",
    "lodash": "~2.4.1",
    "serialport": "~1.3.1",
    "string": "~1.8.0"
  },
  "bin": {
    "espruino": "cli"
  },
  "readme": "node-espruino\r\n=============\r\n\r\nAn easy to use node module for interfacing with a micro controller running [espruino](http://www.espruino.com/) as well as a cli.\r\n[Available as a Grunt task](https://www.npmjs.org/package/grunt-espruino).\r\n\r\nUsing from node\r\n---------------\r\n\r\n```\r\nvar nodeEspruino = require('node-espruino');\r\n\r\nvar espruino = nodeEspruino.espruino({\r\n\tcomPort: 'COM4'\r\n});\r\n\r\nespruino.open(function(){\r\n\tespruino.command('1+2', function(result){\r\n\t\tconsole.log(result);\r\n\t});\r\n});\r\n```\r\n\r\nUsing from shell\r\n----------------\r\n\r\n\r\nInstall.\r\n\r\n```\r\nnpm install node-espruino -g\r\n```\r\n\r\nUse.\r\n\r\n```\r\n$ echo 'digitalWrite(LED1, true);' > led.js\r\n$ espruino upload led.js --save\r\n```\r\n\r\nif you know the serial number of the board, you can refer to it by serial:\r\n\r\n```\r\n$ espruino upload led.js --save --boardserial '33FFD605-41573033-15720843'\r\n```\r\n\r\nAPI Reference\r\n-------------\r\n\r\n### espruino\r\n\r\nReturns a new espruino. `comPort` or `boardSerial` must be specified. Before any communication can \r\nbe made to the espruino board the `open` function must be called, which acepts a callback to be\r\nexecuted on completion.\r\n\r\n#### options\r\n\r\n`comPort`\r\n\r\nCOM address to connect to.\r\n\r\n`boardSerial` \r\n\r\nSerial (as in board manufacturer serial number, not COM port.)\r\nof board you want to connect to.\r\n\t\r\n#### methods\r\n\r\n##### function open( function done(err) )\r\n\r\nThis function must be called before any other function, it opens communication to the espruino board.\r\nAccepts a callback to be run when communication is established.\r\n\r\n##### function command(text, function done(result) )\r\n\r\nExecutes text on espruino, calls `done` on completion with result of command. \r\n\r\n##### function reset(done)\r\n\r\nResets boards memory to default, dumping all loaded code. `done` is a callback that executes after reset completes.\r\n\r\n##### function save()\r\n\r\nSaves loaded code to flash. Preserves after board hard reset and loss of power. `done` is a callback that executes after reset completes.\r\n\r\n##### function upload(code, options, function done() )\r\n`options`:\r\n* `save: [true| false]` whether to save the loaded code to the to the espruinos onboard flash.\r\n* `uploadModules: [true | false]` if true, module requires are parsed out of `code` and uploaded.\r\n* `moduleDir: 'Path'` the root directory to look for modules.\r\n\r\nConvenience function. Parses out modules from code and loads from disk, resets board, then uploads `code`. \r\n\r\n##### function dump(function done(result))\r\n\r\nDumps loaded code from espruino.\r\n\r\n##### function addModule(name, code, function done)\r\n\r\nAdds a module with the specified name and code to the espruino. It can then be loaded by \r\nrunning `require('name')` on the espruino.\r\n\r\n##### function clearModules(function done)\r\n\r\nClears all loaded modules from espruino.\r\n\r\n##### function parseModules(code)\r\n\r\nReturns an array of all modules defined in `code`. Parses out `require('module')` from input code.\r\n\r\n##### function close(function done() )\r\n\r\nCloses serial connection to espruino.\r\n\r\n#### events\r\n\r\n`.on('data', function callback(data) )`\r\n\r\nwhen espruino writes data back over serial, callback is called with data.\r\n\r\n## CLI Reference\r\n----------------\r\n\r\n### Global arguments\r\n\r\n`--port [COM Port]`\r\n\r\n`--boardserial [Board Serial No]`\r\n\r\n`--listen`\r\n\r\nIf listen is specified, after the command is completed we will leave the serial connection open and print from the espruino.\r\n\r\n### Commands\r\n\r\n`upload [file] --save`\r\n\r\nFlashes the specified file to the espruino. If `save` is specified the uploaded code is saved to flash.\r\n\r\n## Issues\r\n---------\r\n\r\n* The command line functionality doesnt like arguments with & in them, everything after gets truncated.\r\n* The board is remembering things after reset has been called, I believe this is a issue\r\n\twith the board itself. [Reported here.](https://github.com/espruino/Espruino/issues/231).\r\n\r\n## ToDo\r\n-------\r\n\r\nNothing now. Yay!",
  "readmeFilename": "readme.md",
  "_id": "node-espruino@0.1.5",
  "_shasum": "82838cc00bc3c7fd4b529a357ef112fb5612dc74",
  "_from": "node-espruino@",
  "_resolved": "https://registry.npmjs.org/node-espruino/-/node-espruino-0.1.5.tgz"
}
